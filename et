[1mdiff --cc 0x03-debugging/2-largest_number.c[m
[1mindex c24e253,995887c..0000000[m
mode 100755,100644..100644[m
[1m--- a/0x03-debugging/2-largest_number.c[m
[1m+++ b/0x03-debugging/2-largest_number.c[m
[36m@@@ -1,7 -1,5 +1,10 @@@[m
  #include "main.h"[m
  [m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m +[m
[32m++=======[m
[32m++>>>>>>> 4b263b1b3fa70b8ddf625d4bf53c5e7d28c40536[m
  /**[m
   * largest_number - returns the largest of 3 numbers[m
   * @a: first integer[m
[36m@@@ -10,50 -8,26 +13,75 @@@[m
   * Return: largest number[m
   */[m
  [m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m +[m
[32m +int largest_number(int a, int b, int c)[m
[32m +[m
[32m +{[m
[32m +[m
[32m +int largest;[m
[32m +[m
[32m +[m
[32m +[m
[32m +if (a > b && a > c)[m
[32m +[m
[32m +{[m
[32m +[m
[32m +largest = a;[m
[32m +[m
[32m +}[m
[32m +[m
[32m +else if (b > c && b > a)[m
[32m +[m
[32m +{[m
[32m +[m
[32m +largest = b;[m
[32m +[m
[32m +}[m
[32m +[m
[32m +else if (c > b)[m
[32m +[m
[32m +{[m
[32m +[m
[32m +largest = c;[m
[32m +[m
[32m++=======[m
[32m+ int largest_number(int a, int b, int c)[m
[32m+ {[m
[32m+ int largest;[m
[32m+ [m
[32m+ if (a > b && a > c)[m
[32m+ {[m
[32m+ 	largest = a;[m
[32m+ }[m
[32m+ else if (b > c && b > a)[m
[32m+ {[m
[32m+ 	largest = b;[m
[32m+ }[m
[32m+ else if (c > b)[m
[32m+ {[m
[32m+ 	largest = c;[m
[32m++>>>>>>> 4b263b1b3fa70b8ddf625d4bf53c5e7d28c40536[m
  }[m
[32m +[m
  else[m
[32m +[m
  {[m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m +largest = b;[m
[32m +[m
[32m +}[m
[32m +[m
[32m +[m
[32m +[m
[32m +return (largest);[m
[32m +[m
[32m++=======[m
[32m+ 	largest = b;[m
[32m+ }[m
[32m+ [m
[32m+ return (largest);[m
[32m++>>>>>>> 4b263b1b3fa70b8ddf625d4bf53c5e7d28c40536[m
  }[m
